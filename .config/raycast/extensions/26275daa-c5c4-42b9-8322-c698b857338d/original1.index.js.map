{
  "version": 3,
  "sources": ["../src/index.tsx"],
  "sourcesContent": ["import { Action, ActionPanel, Icon, List, Toast, showToast } from \"@raycast/api\";\nimport { exec } from \"child_process\";\nimport { FC, useEffect, useState } from \"react\";\n\ntype NetworkService = {\n  id: string;\n  name: string;\n  hardwarePort: string;\n  device: string;\n  status: NetworkServiceStatus;\n};\n\ntype NetworkServiceStatus = \"connected\" | \"connecting\" | \"disconnecting\" | \"disconnected\" | \"invalid\";\n\nconst statusSortOrder = [\n  \"connected\",\n  \"connecting\",\n  \"disconnecting\",\n  \"disconnected\",\n  \"invalid\",\n] as const satisfies Readonly<NetworkServiceStatus[]>;\n\nconst sortNetworkServices = (services: NetworkService[]): NetworkService[] => {\n  const sortedServices = services.sort((a, b) => {\n    const statusA = statusSortOrder.indexOf(a.status);\n    const statusB = statusSortOrder.indexOf(b.status);\n\n    if (statusA < statusB) {\n      return -1;\n    } else if (statusA > statusB) {\n      return 1;\n    } else {\n      return 0;\n    }\n  });\n\n  return sortedServices;\n};\n\nconst parseServices = (text: string) => {\n  const regex = /\\((\\d+)\\)\\s+(.*?)\\s+\\(Hardware Port: (.*?), Device: (.*?)\\)/g;\n  const matches = Array.from(text.matchAll(regex));\n\n  return matches.map((item) => {\n    return {\n      id: item[1],\n      name: item[2],\n      hardwarePort: item[3],\n      device: item[4],\n      status: \"disconnected\",\n    } as NetworkService;\n  });\n};\n\ntype NetworkServiceItemProps = {\n  service: NetworkService;\n  actionName?: string;\n  action?: (service: NetworkService) => void;\n};\n\nexport default function Command() {\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState<Error>();\n  const [header, setHeader] = useState<string>();\n  const [networkServices, setNetworkServices] = useState<Record<string, NetworkService>>({});\n\n  const listNetworkServiceOrder = (): Promise<string> => {\n    return new Promise((resolve, reject) => {\n      exec(\"/usr/sbin/networksetup -listnetworkserviceorder\", (err, stdout) => {\n        if (err != null) {\n          reject(err);\n        } else {\n          resolve(stdout.trim());\n        }\n      });\n    });\n  };\n\n  const showPPPoEStatus = (networkServiceName: string): Promise<NetworkServiceStatus> => {\n    // Escape double quotes in Network Service Name\n    networkServiceName = networkServiceName.replace(/\"/g, '\\\\\"');\n\n    return new Promise((resolve, reject) => {\n      exec(`/usr/sbin/networksetup -showpppoestatus \"${networkServiceName}\"`, (err, stdout) => {\n        if (err != null) {\n          reject(err);\n        } else {\n          resolve(stdout.trim() as NetworkServiceStatus);\n        }\n      });\n    });\n  };\n\n  const updateNetworkServices = () => {\n    listNetworkServiceOrder()\n      .then((stdout) => {\n        const denylist = [\"Wi-Fi\", \"Bluetooth PAN\", \"Thunderbolt Bridge\"];\n\n        const [head] = stdout.split(\"\\n\");\n        setHeader(head);\n\n        const services = parseServices(stdout).filter((service) => !denylist.includes(service.name));\n\n        return services;\n      })\n      .then((services) => {\n        const promises = services.map(async (service) => {\n          return showPPPoEStatus(service.name).then((status) => {\n            return {\n              ...service,\n              status: status,\n            };\n          });\n        });\n\n        Promise.all(promises).then((services) => {\n          const networkServices = services.reduce((acc, service) => {\n            return {\n              ...acc,\n              [service.id]: service,\n            };\n          }, {} as Record<string, NetworkService>);\n\n          setNetworkServices(networkServices);\n\n          setIsLoading(false); // this placed here looks odd but otherwise `no results` flickers before render\n        });\n      })\n      .catch((err) => {\n        setError(err);\n      });\n  };\n\n  const connectToPPPoEService = (service: NetworkService) => {\n    // Escape double quotes in Network Service Name\n    const networkServiceName = service.name.replace(/\"/g, '\\\\\"');\n\n    exec(`/usr/sbin/networksetup -connectpppoeservice \"${networkServiceName}\"`, (err) => {\n      if (err != null) {\n        setError(err);\n        return;\n      }\n\n      setNetworkServices({\n        ...networkServices,\n        [service.id]: {\n          ...service,\n          status: \"connecting\",\n        },\n      });\n    });\n  };\n\n  const disconnectFromPPPoEService = (service: NetworkService) => {\n    // Escape double quotes in Network Service Name\n    const networkServiceName = service.name.replace(/\"/g, '\\\\\"');\n\n    exec(`/usr/sbin/networksetup -disconnectpppoeservice \"${networkServiceName}\"`, (err) => {\n      if (err != null) {\n        setError(err);\n        return;\n      }\n\n      setNetworkServices({\n        ...networkServices,\n        [service.id]: {\n          ...service,\n          status: \"disconnecting\",\n        },\n      });\n    });\n  };\n\n  useEffect(() => {\n    let intervalId: ReturnType<typeof setInterval> | undefined = undefined;\n    if (\n      !isLoading &&\n      (Object.values(networkServices).find((service) => service.status === \"connecting\") ||\n        Object.values(networkServices).find((service) => service.status === \"disconnecting\"))\n    ) {\n      intervalId = setInterval(() => {\n        updateNetworkServices();\n      }, 500);\n    }\n\n    return () => (intervalId ? clearInterval(intervalId) : undefined);\n  }, [isLoading, networkServices]);\n\n  useEffect(() => {\n    updateNetworkServices();\n  }, []);\n\n  if (error) {\n    showToast(Toast.Style.Failure, \"Something went wrong\", error.message);\n  }\n\n  const NetworkServiceItem: FC<NetworkServiceItemProps> = ({ service }) => {\n    let actionName: string | undefined;\n    let action: ((service: NetworkService) => void) | undefined;\n    let icon: Icon | undefined;\n\n    switch (service.status) {\n      case \"disconnected\":\n        actionName = \"Connect\";\n        action = connectToPPPoEService;\n        icon = Icon.Circle;\n        break;\n      case \"connected\":\n        actionName = \"Disconnect\";\n        action = disconnectFromPPPoEService;\n        icon = Icon.Checkmark;\n        break;\n      case \"connecting\":\n      case \"disconnecting\":\n        icon = Icon.CircleEllipsis;\n        break;\n      default:\n        icon = Icon.XMarkCircle;\n        break;\n    }\n\n    return (\n      <List.Item\n        icon={icon}\n        title={service.name}\n        actions={\n          actionName && (\n            <ActionPanel>\n              <Action title={actionName} onAction={() => action && action(service)} />\n            </ActionPanel>\n          )\n        }\n      />\n    );\n  };\n\n  return (\n    <List isLoading={isLoading}>\n      <List.Section title={header}>\n        {sortNetworkServices(Object.values(networkServices)).map((service) => (\n          <NetworkServiceItem key={service.id} service={service} />\n        ))}\n      </List.Section>\n    </List>\n  );\n}\n"],
  "mappings": "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",
  "names": ["src_exports", "__export", "Command", "__toCommonJS", "import_api", "import_child_process", "import_react", "import_jsx_runtime", "statusSortOrder", "sortNetworkServices", "services", "b", "statusA", "statusB", "parseServices", "text", "regex", "item", "isLoading", "setIsLoading", "error", "setError", "header", "setHeader", "networkServices", "setNetworkServices", "listNetworkServiceOrder", "resolve", "reject", "err", "stdout", "showPPPoEStatus", "networkServiceName", "updateNetworkServices", "denylist", "head", "service", "promises", "status", "acc", "connectToPPPoEService", "disconnectFromPPPoEService", "intervalId", "NetworkServiceItem", "actionName", "action", "icon"]
}
